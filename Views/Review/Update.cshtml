@{
    Layout = "_FrontOfficeLayout";
}

@model Review

<div>
    <h1 class="text-center">Modifica recensione</h1>
    <form class="js_review-form">

        <div class="form-floating mb-3">
            <input id="user-name" type="text" class="form-control" placeholder="Nome" value="@Model.UserName">
            <label for="user-name">Nome</label>
            <div id="js_user-name-errors" class="text-danger d-none"></div>
        </div>

        <div class="form-floating mb-3">
            <textarea id="user-text" class="form-control" placeholder="Messaggio">@Model.Message</textarea>
            <label for="user-text">Messaggio</label>
            <div id="js_user-text-errors" class="text-danger d-none"></div>
        </div>

        <button type="button" class="btn btn-primary" onclick="updateReview()">Modifica</button>
    </form>
</div>

<script type="text/javascript">

    const inputUserName = document.getElementById("user-name");
    const inputUserText = document.getElementById("user-text");

    let startingUserName = inputUserName.value;
    let startingUserText = inputUserText.value;

    //document errors wrappers
    const inputUserNameErrorsWrapper = document.getElementById("js_user-name-errors");
    const inputUserTextErrorsWrapper = document.getElementById("js_user-text-errors");

    function updateReview() {
        inputUserNameErrorsWrapper.classList.add("d-none");
        inputUserTextErrorsWrapper.classList.add("d-none");

        inputUserNameErrorsWrapper.innerHTML = "";
        inputUserTextErrorsWrapper.innerHTML = "";

        axios.put(`/api/review/update/${@Model.Id}`, {
            userName: inputUserName.value,
            message: inputUserText.value,
        })
        .then(response => {
            inputUserName.value = "";
            inputUserText.value = "";

            swal({
                title: "Grazie per il feedback!",
                text: "La tua recensione è stata inviata correttamente",
                icon: "success",
                button: false,
            });

            setTimeout(function () {
                window.location.replace("https://localhost:7271/Review/");
            }, 1000)
            
        }).catch(error => {
            if (startingUserName != "" && inputUserName.value == "") {
                inputUserName.value = startingUserName;
            }
            else if (startingUserName != inputUserName.value) {
                startingUserName = inputUserName.value;
            }
            else {
                inputUserName.value = startingUserName;
            }

            if(startingUserText != "" && inputUserText.value == "") {
                inputUserText.value = startingUserText;
            }
            else if (startingUserText != inputUserText.value) {
                startingUserText = inputUserText.value
            }
            else {
                inputUserText.value = startingUserText;
            }

            console.log(JSON.stringify(error.response));

            const errors = error.response.data.errors;

            inputUserNameErrorsWrapper.classList.remove("d-none");
            inputUserTextErrorsWrapper.classList.remove("d-none");

            if (errors.UserName) {
                errors.UserName.forEach(mesage => {
                    inputUserNameErrorsWrapper.innerHTML = `<div>${mesage}</div>`;
                })
            }

            if (errors.Message) {
                errors.Message.forEach(mesage => {
                    inputUserTextErrorsWrapper.innerHTML = `<div>${mesage}</div>`;
                })
            }
        })
    }
</script>